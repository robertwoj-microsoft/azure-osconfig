name: Fuzzer execution

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      arch:
        required: true
        type: string
      package-type:
        required: true
        type: string
      timeout-seconds:
        description: The maximum time in seconds to run the fuzzer.
        required: false
        type: number
        default: 600

jobs:
  package:
    uses: ./.github/workflows/package-build.yml
    with:
      target: ${{ inputs.target }}
      arch: ${{ inputs.arch }}
      artifact: ${{ inputs.target }}-fuzzer
      package-type: ${{ inputs.package-type }}
      build-fuzzers: true

  fuzzer-execution:
    needs: package
    runs-on: [self-hosted, 1ES.Pool=robertwoj-e2e-pool, '1ES.ImageOverride=${{ inputs.target }}']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        id: download
        with:
          name: ${{ inputs.target }}-fuzzer

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y clang-15
          sudo chmod +x ${{ steps.download.outputs.download-path }}/fuzzer/osconfig-fuzzer
          mkdir /tmp/corpus
          mkdir /tmp/artifacts
          cp -r ${{ steps.download.outputs.download-path }}/src/fuzzer/seed_corpus/* /tmp/corpus
          sudo apt install -y gdb
          sudo apt install -y strace

      - name: Run osconfig-fuzzer
        working-directory: ${{ steps.download.outputs.download-path }}/fuzzer
        run: |
          cat "${BASH_SOURCE[0]}"
          echo "========================================"
          ulimit -c unlimited
          ulimit -c
          sudo bash -c 'echo /tmp/cores/osconfig-fuzzer.%e.%p > /proc/sys/kernel/core_pattern'
          core_location="/tmp/cores/"
          mkdir -p ${core_location}
          echo "Core location: ${core_location}"
          ldd ./osconfig-fuzzer
          clang --version
          set -o pipefail
          set +e
          # echo "run /tmp/corpus" >> commands.txt
          # echo "quit" >> commands.txt
          # gdb -batch -x commands.txt ./osconfig-fuzzer
          for i in $(seq 1 20); do
            ./osconfig-fuzzer -artifact_prefix=/tmp/artifacts/ -max_total_time=${{ inputs.timeout-seconds }} /tmp/corpus/* >/tmp/osconfig-stdout_${i}.log 2>/tmp/osconfig-fuzzer_${i}.log
          done

      - name: Print stack trace
        working-directory: ${{ steps.download.outputs.download-path }}/fuzzer
        if: failure()
        run: |
          core_location="/tmp/cores/"
          ls -l ${core_location}
          echo "bt" > commands.txt
          echo "quit" >> commands.txt
          gdb -batch -x commands.txt ./osconfig-fuzzer $(ls -t ${core_location} | head -n 1)

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: ${{ inputs.target }}-logs
          path: |
            /tmp/osconfig-fuzzer.log
            /tmp/osconfig-stdout.log
            /tmp/cores
            ${{ steps.download.outputs.download-path }}/fuzzer/osconfig-fuzzer
            /tmp/artifacts

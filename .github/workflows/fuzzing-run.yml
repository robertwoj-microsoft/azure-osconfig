name: Fuzzer execution

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      arch:
        required: true
        type: string
      package-type:
        required: true
        type: string
      timeout-seconds:
        description: The maximum time in seconds to run the fuzzer.
        required: false
        type: number
        default: 600
      container-tag:
        type: string
        required: false
        default: latest

env:
  MOUNT: /azure-osconfig
  REGISTRY: ghcr.io

jobs:
  package:
    uses: ./.github/workflows/package-build.yml
    with:
      target: ${{ inputs.target }}
      arch: ${{ inputs.arch }}
      artifact: ${{ inputs.target }}-fuzzer
      package-type: ${{ inputs.package-type }}
      build-fuzzers: true

  fuzzer-execution:
    needs: package
    runs-on: [self-hosted, 1ES.Pool=robertwoj-e2e-pool, '1ES.ImageOverride=${{ inputs.target }}']
    steps:
      - uses: actions/download-artifact@v4
        id: download
        with:
          name: ${{ inputs.target }}-fuzzer

      - name: Install prerequisites
        run: |
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo apt-get install -y clang
          sudo chmod +x ${{ steps.download.outputs.download-path }}/fuzzer/osconfig-fuzzer
          mkdir /tmp/corpus
          mkdir /tmp/artifacts
          cp -r ${{ steps.download.outputs.download-path }}/src/fuzzer/seed_corpus/* /tmp/corpus
          sudo apt install -y gdb
          sudo apt install -y strace

      - name: Run container
        id: container
        uses: ./.github/actions/container-run
        with:
          registry: ${{ env.REGISTRY }}
          container: azure/azure-osconfig/${{ inputs.target }}-${{ inputs.arch }}
          mount: ${{ github.workspace }}:${{ env.MOUNT }}
          tag: ${{ inputs.container-tag }}

      - name: Run osconfig-fuzzer
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build/fuzzer
          cmd: set +e && for i in $(seq 1 20); do ./osconfig-fuzzer -artifact_prefix=/tmp/artifacts/ -max_total_time=${{ inputs.timeout-seconds }} /tmp/corpus/*; done

      # - name: Run osconfig-fuzzer
      #   working-directory: ${{ steps.download.outputs.download-path }}/fuzzer
      #   run: |
      #     cat "${BASH_SOURCE[0]}"
      #     echo "========================================"
      #     set +e
      #     ulimit -a
      #     ulimit -l 8216248
      #     ulimit -s 16384
      #     sudo bash -c 'echo /tmp/cores/osconfig-fuzzer.%e.%p > /proc/sys/kernel/core_pattern'
      #     core_location="/tmp/cores/"
      #     mkdir -p ${core_location}
      #     echo "Core location: ${core_location}"
      #     ldd ./osconfig-fuzzer
      #     set -o pipefail
      #     set +e
      #     # echo "run /tmp/corpus" >> commands.txt
      #     # echo "quit" >> commands.txt
      #     # gdb -batch -x commands.txt ./osconfig-fuzzer
      #     # systemctl status
      #     hostname
      #     uname -a
      #     for i in $(seq 1 20); do
      #       ./osconfig-fuzzer -artifact_prefix=/tmp/artifacts/ -max_total_time=${{ inputs.timeout-seconds }} /tmp/corpus/*
      #     done

      # - name: Print stack trace
      #   working-directory: ${{ steps.download.outputs.download-path }}/fuzzer
      #   if: failure()
      #   run: |
      #     core_location="/tmp/cores/"
      #     ls -l ${core_location}
      #     echo "bt" > commands.txt
      #     echo "quit" >> commands.txt
      #     gdb -batch -x commands.txt ./osconfig-fuzzer $(ls -t ${core_location} | head -n 1)

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: ${{ inputs.target }}-logs
          path: |
            /tmp/osconfig-fuzzer.log
            /tmp/osconfig-stdout.log
            /tmp/cores
            ${{ steps.download.outputs.download-path }}/fuzzer/osconfig-fuzzer
            /tmp/artifacts
